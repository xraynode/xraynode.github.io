<!doctype html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://xraynode.github.io/news/article-53349.htm" />
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <title>基于kubernetes的分布式限流</title>
        <meta name="description" content="做为一个数据上报系统，随着接入量越来越大，由于 API 接口无法控制调用方的行为，因此当遇到瞬时请求量激增时，会导致接口占用过多服务器资源，使得其他请求响应速度降低或是超时，更有甚者可能导致服务器宕机" />
        <link rel="icon" href="/assets/website/img/xraynode/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="XRayNode每日订阅站">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://xraynode.github.io/news/article-53349.htm" />
    <meta property="og:site_name" content="XRayNode每日订阅站" />
    <meta property="og:title" content="基于kubernetes的分布式限流" />
    <meta property="og:image" content="https://xraynode.github.io/uploads/20240722/4c7fe15e1ca88f78cafa82950f937915.webp" />
        <meta property="og:release_date" content="2025-02-08T04:41:48" />
    <meta property="og:updated_time" content="2025-02-08T04:41:48" />
        <meta property="og:description" content="做为一个数据上报系统，随着接入量越来越大，由于 API 接口无法控制调用方的行为，因此当遇到瞬时请求量激增时，会导致接口占用过多服务器资源，使得其他请求响应速度降低或是超时，更有甚者可能导致服务器宕机" />
    
    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="基于kubernetes的分布式限流">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    <link rel="dns-prefetch" href="https://fonts.googleapis.com">

    <!-- google-fonts -->
    <link href="//fonts.googleapis.com/css2?family=Raleway:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap" rel="stylesheet">
    <!-- //google-fonts -->
    <!-- Font-Awesome-Icons-CSS -->
    <link rel="stylesheet" href="/assets/website/css/xraynode/fontawesome-all.min.css">
    <!-- Template CSS Style link -->
    <link rel="stylesheet" href="/assets/website/css/xraynode/style-starter.css">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-KX80YQ9BLW"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-KX80YQ9BLW');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
        <!--header-->
    <header id="site-header" class="fixed-top">
        <div class="container">
            <nav class="navbar navbar-expand-lg stroke px-0">
                <a class="navbar-brand" href="/">
                                    <span>XRay Node</span>
                                </a>
                    
                <button class="navbar-toggler  collapsed bg-gradient" type="button" data-toggle="collapse" data-target="#navbarTogglerDemo02" aria-controls="navbarTogglerDemo02" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon fa icon-expand fa-bars"></span>
                    <span class="navbar-toggler-icon fa icon-close fa-times"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarTogglerDemo02">
                    <ul class="navbar-nav ml-lg-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/free-nodes/">免费节点</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/paid-subscribe/">推荐机场</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/client.htm">客户端</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/news/">新闻资讯</a>
                        </li>
                                            </ul>
                </div>
                <!-- //search button -->
                <!-- toggle switch for light and dark theme -->
                <div class="cont-ser-position">
                    <nav class="navigation">
                        <div class="theme-switch-wrapper">
                            <label class="theme-switch" for="checkbox">
                                <input type="checkbox" id="checkbox">
                                <div class="mode-container">
                                    <i class="gg-sun"></i>
                                    <i class="gg-moon"></i>
                                </div>
                            </label>
                        </div>
                    </nav>
                </div>
                <!-- //toggle switch for light and dark theme -->
            </nav>
        </div>
    </header>
    <!--//header-->

    <!-- inner banner -->
    <section class="inner-banner py-5">
        <div class="w3l-breadcrumb py-lg-5">
            <div class="container pt-4 pb-sm-4">
                <h1 class="inner-text-title font-weight-bold pt-5">基于kubernetes的分布式限流</h1>
                <ul class="breadcrumbs-custom-path mt-3">
                    <li><a href="/">首页</a></li>
                    <li><a href="/news/"><i class="fas fa-angle-right mx-2"></i>新闻资讯</a></li>
                    <li class="active"><i class="fas fa-angle-right mx-2"></i>正文</li>
                </ul>
            </div>
        </div>
    </section>
    <!-- //inner banner -->

    <!-- video section -->
    <section class="w3l-ab-section py-5">
        <div class="container py-md-5 py-4">
            <div class="row">
                <div class="col-md-9">
                                    <input type="hidden" id="share-website-info" data-name="" data-url="">
                  				  				  				<p>做为一个数据上报系统，随着接入量越来越大，由于 API 接口无法控制调用方的行为，因此当遇到瞬时请求量激增时，会导致接口占用过多服务器资源，使得其他请求响应速度降低或是超时，更有甚者可能导致服务器宕机。</p> <h2 id="一概念">一、概念</h2> <p>限流(Ratelimiting)指对应用服务的请求进行限制，例如某一接口的请求限制为 100 个每秒,对超过限制的请求则进行快速失败或丢弃。</p> <h3 id="11-使用场景">1.1 使用场景</h3> <p>限流可以应对：</p> <ul> <li>热点业务带来的突发请求；</li> <li>调用方 bug 导致的突发请求；</li> <li>恶意攻击请求。</li> </ul> <h3 id="12-维度">1.2 维度</h3> <p>对于限流场景，一般需要考虑两个维度的信息：<br /><strong>时间</strong><br /> 限流基于某段时间范围或者某个时间点，也就是我们常说的“时间窗口”，比如对每分钟、每秒钟的时间窗口做限定<br /><strong>资源</strong><br /> 基于可用资源的限制，比如设定最大访问次数，或最高可用连接数。<br />   限流就是在某个时间窗口对资源访问做限制，比如设定每秒最多100个访问请求。</p> <p><img decoding="async" src="https://tva1.sinaimg.cn/large/e6c9d24egy1h10f5c73zyj21280g4my2.jpg" alt="基于kubernetes的分布式限流"></p> <h3 id="13-分布式限流">1.3 分布式限流</h3> <p>分布式限流相比于单机限流，只是把限流频次分配到各个节点中，比如限制某个服务访问100qps，如果有10个节点，那么每个节点理论上能够平均被访问10次，如果超过了则进行频率限制。</p> <h2 id="二分布式限流常用方案">二、分布式限流常用方案</h2> <p><strong>基于Guava的客户端限流</strong><br /> Guava是一个客户端组件，在其多线程模块下提供了以RateLimiter为首的几个限流支持类。它只能对“当前”服务进行限流，即它不属于分布式限流的解决方案。</p> <p><strong>网关层限流</strong><br /> 服务网关，作为整个分布式链路中的第一道关卡，承接了所有用户来访请求。我们在网关层进行限流，就可以达到了整体限流的目的了。目前，主流的网关层有以软件为代表的Nginx，还有Spring Cloud中的Gateway和Zuul这类网关层组件，也有以硬件为代表的F5。</p> <p><strong>中间件限流</strong><br /> 将限流信息存储在分布式环境中某个中间件里（比如Redis缓存），每个组件都可以从这里获取到当前时刻的流量统计，从而决定是拒绝服务还是放行流量。</p> <p><strong>限流组件</strong><br /> 目前也有一些开源组件提供了限流的功能，比如Sentinel就是一个不错的选择。Sentinel是阿里出品的开源组件，并且包含在了Spring Cloud Alibaba组件库中。Hystrix也具有限流的功能。</p> <p>Guava的Ratelimiter设计实现相当不错，可惜只能支持单机，网关层限流如果是单机则不太满足高可用，并且分布式网关的话还是需要依赖中间件限流，而redis之类的网络通信需要占用一小部分的网络消耗。阿里的Sentinel也是同理，底层使用的是redis或者zookeeper，每次访问都需要调用一次redis或者zk的接口。那么在云原生场景下，我们有没有什么更好的办法呢？</p> <p>对于极致追求高性能的服务不需要考虑熔断、降级来说，是需要尽量减少网络之间的IO，那么是否可以通过一个总限频然后分配到具体的单机里面去，在单机中实现平均的限流，比如限制某个ip的qps为100，服务总共有10个节点，那么平均到每个服务里就是10qps，此时就可以通过guava的ratelimiter来实现了，甚至说如果服务的节点动态调整，单个服务的qps也能动态调整。</p> <h2 id="三基于kubernetes的分布式限流">三、基于kubernetes的分布式限流</h2> <p>在Spring Boot应用中，定义一个filter，获取请求参数里的key（ip、userId等），然后根据key来获取rateLimiter，其中，rateLimiter的创建由数据库定义的限频数和副本数来判断，最后，再通过rateLimiter.tryAcquire来判断是否可以通过。</p> <p><img decoding="async" src="https://tva1.sinaimg.cn/large/e6c9d24egy1h13ke2ox1wj20u00vdq4g.jpg" alt="基于kubernetes的分布式限流"></p> <h3 id="31-kubernetes中的副本数">3.1 kubernetes中的副本数</h3> <p>在实际的服务中，数据上报服务一般无法确定客户端的上报时间、上报量，特别是对于这种要求高性能，服务一般都会用到HPA来实现动态扩缩容，所以，需要去间隔一段时间去获取服务的副本数。</p> <pre><code class="language-go">func CountDeploymentSize(namespace string, deploymentName string) *int32 { 	deployment, err := client.AppsV1().Deployments(namespace).Get(context.TODO(), deploymentName, metav1.GetOptions{}) 	if err != nil { 		return nil 	} 	return deployment.Spec.Replicas }</code></pre> <p>用法：GET host/namespaces/test/deployments/k8s-rest-api直接即可。</p> <h3 id="32-ratelimiter的创建">3.2 rateLimiter的创建</h3> <p>在RateLimiterService中定义一个LoadingCache&lt;String, RateLimiter&gt;，其中，key可以为ip、userId等，并且，在多线程的情况下，使用refreshAfterWrite只阻塞加载数据的线程，其他线程则返回旧数据，极致发挥缓存的作用。</p> <pre><code class="language-java">private final LoadingCache&lt;String, RateLimiter&gt; loadingCache = Caffeine.newBuilder()         .maximumSize(10_000)         .refreshAfterWrite(20, TimeUnit.MINUTES)         .build(this::createRateLimit); //定义一个默认最小的QPS private static final Integer minQpsLimit = 3000;</code></pre> <p>之后是创建rateLimiter，获取总限频数totalLimit和副本数replicas，之后是自己所需的逻辑判断，可以根据totalLimit和replicas的情况来进行qps的限定。</p> <pre><code class="language-java">public RateLimiter createRateLimit(String key) {     log.info("createRateLimit,key:{}", key);     int totalLimit = 获取总限频数，可以在数据库中定义     Integer replicas = kubernetesService.getDeploymentReplicas();     RateLimiter rateLimiter;     if (totalLimit &gt; 0 &amp;&amp; replicas == null) {         rateLimiter = RateLimiter.create(totalLimit);     } else if (totalLimit &gt; 0) {         int nodeQpsLimit = totalLimit / replicas;         rateLimiter = RateLimiter.create(nodeQpsLimit &gt; minQpsLimit ? nodeQpsLimit : minQpsLimit);     } else {         rateLimiter = RateLimiter.create(minQpsLimit);     }     log.info("create rateLimiter success,key:{},rateLimiter:{}", key, rateLimiter);     return rateLimiter; }</code></pre> <h3 id="33-ratelimiter的获取">3.3 rateLimiter的获取</h3> <p>根据key获取RateLimiter，如果有特殊需求的话，需要判断key不存在的尝尽</p> <pre><code class="language-java">public RateLimiter getRateLimiter(String key) {   return loadingCache.get(key); }</code></pre> <h3 id="34-filter里的判断">3.4 filter里的判断</h3> <p>最后一步，就是使用rateLimiter来进行限流，如果rateLimiter.tryAcquire()为true，则进行filterChain.doFilter(request, response)，如果为false，则返回HttpStatus.TOO_MANY_REQUESTS</p> <pre><code class="language-java">public class RateLimiterFilter implements Filter {     @Resource     private RateLimiterService rateLimiterService;      @Override     public void doFilter(ServletRequest request, ServletResponse response, FilterChain filterChain) throws IOException, ServletException {         HttpServletRequest httpServletRequest = (HttpServletRequest) request;         HttpServletResponse httpServletResponse = (HttpServletResponse) response;         String key = httpServletRequest.getHeader("key");         RateLimiter rateLimiter = rateLimiterService.getRateLimiter(key);         if (rateLimiter != null) {             if (rateLimiter.tryAcquire()) {                 filterChain.doFilter(request, response);             } else {                 httpServletResponse.setStatus(HttpStatus.TOO_MANY_REQUESTS.value());             }         } else {             filterChain.doFilter(request, response);         }     } }</code></pre> <h2 id="四性能压测">四、性能压测</h2> <p>为了方便对比性能之间的差距，我们在本地单机做了下列测试，其中，总限频都设置为3万。</p> <p><strong>无限流</strong></p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/a23aaccc2cd084760ceed69e3341e3c7.jpg" alt="基于kubernetes的分布式限流"></p> <p><strong>使用redis限流</strong></p> <p>其中，ping redis大概6-7ms左右，对应的，每次请求需要访问redis，时延都有大概6-7ms，性能下降明显</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/e8f0b74d7fde9ff12a4800f6e13e9010.jpg" alt="基于kubernetes的分布式限流"></p> <p><strong>自研限流</strong></p> <p>性能几乎追平无限流的场景，guava的rateLimiter确实表现卓越</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/6ca073d2d6d3d0c5dc94d718f17a1285.jpg" alt="基于kubernetes的分布式限流"></p> <h2 id="五其他问题">五、其他问题</h2> <p><strong>5.1 对于保证qps限频准确的时候，应该怎么解决呢？</strong></p> <p>在k8s中，服务是动态扩缩容的，相应的，每个节点应该都要有所变化，如果对外宣称限频100qps，而且后续业务方真的要求百分百准确，只能把LoadingCache&lt;String, RateLimiter&gt;的过期时间调小一点，让它能够近实时的更新单节点的qps。这里还需要考虑一下k8s的压力，因为每次都要获取副本数，这里也是需要做缓存的</p> <p><strong>5.2 服务从1个节点动态扩为4个节点，这个时候新节点识别为4，但其实有些并没有启动完，会不会造成某个节点承受了太大的压力</strong></p> <p>理论上是存在这个可能的，这个时候需要考虑一下初始的副本数的，扩缩容不能一蹴而就，一下子从1变为4变为几十个这种。一般的话，生产环境肯定是不能只有一个节点，并且要考虑扩缩容的话，至于要有多个副本预备的</p> <p><strong>5.3 如果有多个副本，怎么保证请求是均匀的</strong></p> <p>这个是依赖于k8s的service负载均衡策略的，这个我们之前做过实验，流量确实是能够均匀的落到节点上的。还有就是，我们整个限流都是基于k8s的，如果k8s出现问题，那就是整个集群所有服务都有可能出现问题了。</p> <h2 id="参考">参考</h2> <p>1.<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://blog.csdn.net/hou_ge/article/details/113869419"  target="_blank" rel="nofollow">常见的分布式限流解决方案</a><br /> 2.<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://www.infoq.cn/article/qg2tx8fyw5vt-f3hh673"  target="_blank" rel="nofollow">分布式服务限流实战</a><br /> 3.<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://www.cnblogs.com/huilei/p/13773557.html"  target="_blank" rel="nofollow">高性能</a></p> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-52812.htm">动物疫苗的种类有哪些类型图片 动物疫苗的种类有哪些类型图片大全</a></p>
                                        <p>下一个：<a href="/news/article-53350.htm">宠物诊所申请动物诊疗许可证的条件是什么（宠物诊所办理流程）</a></p>
                                    </div>
                                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-51756.htm" title="买什么牌子的耳机好用(耳朵聋了买什么牌子的耳机好)">买什么牌子的耳机好用(耳朵聋了买什么牌子的耳机好)</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-29-free-node-subscribe.htm" title="「11月29日」最高速度19.7M/S，2024年XRay每天更新免费节点订阅链接">「11月29日」最高速度19.7M/S，2024年XRay每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-29911.htm" title="Spring Boot+Mockito+JUnit中的@Mock注入@InjectMocks失效">Spring Boot+Mockito+JUnit中的@Mock注入@InjectMocks失效</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-12-2-free-node-subscribe.htm" title="「12月2日」最高速度18.6M/S，2024年XRay每天更新免费节点订阅链接">「12月2日」最高速度18.6M/S，2024年XRay每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-2-6-free-winxray-node.htm" title="「2月6日」最高速度21.3M/S，2025年XRay每天更新免费节点订阅链接">「2月6日」最高速度21.3M/S，2025年XRay每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-2-free-high-speed-nodes.htm" title="「1月2日」最高速度22.8M/S，2025年XRay每天更新免费节点订阅链接">「1月2日」最高速度22.8M/S，2025年XRay每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-34878.htm" title="北京动物咬伤去哪打疫苗（北京动物园咬伤）">北京动物咬伤去哪打疫苗（北京动物园咬伤）</a></li>
                        <li class="py-2"><a href="/news/article-28711.htm" title="中国十大动物疫苗公司排名榜 中国十大动物疫苗公司排名榜单">中国十大动物疫苗公司排名榜 中国十大动物疫苗公司排名榜单</a></li>
                        <li class="py-2"><a href="/news/article-30592.htm" title="宠物领养协议书模板图片高清大图（宠物领养协议简单版本）">宠物领养协议书模板图片高清大图（宠物领养协议简单版本）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-11-free-winxray-node.htm" title="「1月11日」最高速度19.6M/S，2025年XRay每天更新免费节点订阅链接">「1月11日」最高速度19.6M/S，2025年XRay每天更新免费节点订阅链接</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">30</span> <a href="/date/2025-02/" title="2025-02 归档">2025-02</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">93</span> <a href="/date/2025-01/" title="2025-01 归档">2025-01</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">93</span> <a href="/date/2024-12/" title="2024-12 归档">2024-12</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">30</span> <a href="/date/2024-11/" title="2024-11 归档">2024-11</a></h4>
            </li>
                    </ul>
    </div>
</div>

                </div>
            </div>
        </div>
    </section>
    <!-- //video section -->

        <!-- footer -->
    <footer class="w3l-footer-29-main">
        <div class="footer-29 py-5">
            <div class="container py-lg-4">
                <div class="row footer-top-29">
                    <div class="col-lg-3 footer-contact-list mt-lg-0 mt-md-5 mt-4">
                        <!-- copyright -->
                        <p class="copy-footer-29 mt-4">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                            XRayNode每日订阅站 版权所有 Powered by WordPress
                        </p>
                    </div>
                </div>
            </div>
        </div>
    </footer>
    <!-- //footer -->
    <!-- Js scripts -->
    <!-- move top -->
    <button onclick="topFunction()" id="movetop" title="Go to top">
        <span class="fas fa-level-up-alt" aria-hidden="true"></span>
    </button>
    <script>
    // When the user scrolls down 20px from the top of the document, show the button
    window.onscroll = function() {
        scrollFunction()
    };

    function scrollFunction() {
        if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
            document.getElementById("movetop").style.display = "block";
        } else {
            document.getElementById("movetop").style.display = "none";
        }
    }

    // When the user clicks on the button, scroll to the top of the document
    function topFunction() {
        document.body.scrollTop = 0;
        document.documentElement.scrollTop = 0;
    }
    </script>
    <!-- //move top -->
    <!-- common jquery plugin -->
    <script src="/assets/website/js/frontend/xraynode/jquery-3.5.1.min.js"></script>
    <!-- //common jquery plugin -->
    <!-- magnific popup -->
    <script src="/assets/website/js/frontend/xraynode/jquery.magnific-popup.min.js"></script>
    <!-- theme switch js (light and dark)-->
    <script src="/assets/website/js/frontend/xraynode/theme-change.js"></script>
    <!-- //theme switch js (light and dark)-->
    <!-- MENU-JS -->
    <script>
    $(window).on("scroll", function() {
        var scroll = $(window).scrollTop();

        if (scroll >= 80) {
            $("#site-header").addClass("nav-fixed");
        } else {
            $("#site-header").removeClass("nav-fixed");
        }
    });

    //Main navigation Active Class Add Remove
    $(".navbar-toggler").on("click", function() {
        $("header").toggleClass("active");
    });
    $(document).on("ready", function() {
        if ($(window).width() > 991) {
            $("header").removeClass("active");
        }
        $(window).on("resize", function() {
            if ($(window).width() > 991) {
                $("header").removeClass("active");
            }
        });
    });
    </script>
    <!-- //MENU-JS -->
    <!-- disable body scroll which navbar is in active -->
    <script>
    $(function() {
        $('.navbar-toggler').click(function() {
            $('body').toggleClass('noscroll');
        })
    });
    </script>
    <!-- //disable body scroll which navbar is in active -->
    <!-- bootstrap -->
    <script src="/assets/website/js/frontend/xraynode/bootstrap.min.js"></script>
    <!-- //bootstrap -->
    <!-- //Js scripts -->
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script>
    <script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>